openapi: "3.0.0"
info:
  version: 1.0.0
  title: Task manager
  description: A sample API that uses a task as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: teamsupareel@gmail.com
    url: http://localhost:8000
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: "http://localhost:8000"
paths:
  /tasks:
    get:
      description: Returns all tasks from the system
      operationId: getAllTasks
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: task response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /task:
    post:
      description: Creates a new task
      operationId: addTask
      requestBody:
        description: Task to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTask"
      responses:
        "200":
          description: task response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /task/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the tasks
      operationId: find task by id
      parameters:
        - name: id
          in: path
          description: ID of task to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: task response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Update a task
      operationId: updateTask
      parameters:
        - name: id
          in: path
          description: ID of task to fetch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Task to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTask"
      responses:
        "200":
          description: task response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: deletes a single task based on the ID supplied
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: task deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Task:
      allOf:
        - $ref: "#/components/schemas/NewTask"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid

    NewTask:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        is_done:
          type: boolean

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
