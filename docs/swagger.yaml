basePath: /api/v1
definitions:
  taskmanager.AddTaskRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  taskmanager.DeleteTaskResponse:
    properties:
      isDeleted:
        type: boolean
    type: object
  taskmanager.TaskError:
    properties:
      message:
        type: string
    type: object
  taskmanager.TaskResponse:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      is_done:
        description: IsDone holds the value of the "is_done" field.
        type: boolean
      name:
        description: Name holds the value of the "name" field.
        type: string
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  taskmanager.UpdateTaskRequest:
    properties:
      isDone:
        type: string
      name:
        type: string
    required:
    - isDone
    - name
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/v1/task:
    get:
      consumes:
      - application/json
      description: get task
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/taskmanager.TaskResponse'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
      summary: List task
      tags:
      - task
    post:
      consumes:
      - application/json
      description: used to add a task in db
      parameters:
      - description: Task object to be added
        in: body
        name: requestbody
        required: true
        schema:
          $ref: '#/definitions/taskmanager.AddTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/taskmanager.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
      summary: Add a task
      tags:
      - task
  /api/v1/task/{id}:
    delete:
      consumes:
      - application/json
      description: delete task
      parameters:
      - description: ID of the task to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/taskmanager.DeleteTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
      summary: Delete a task
      tags:
      - task
    get:
      consumes:
      - application/json
      description: get task by id
      parameters:
      - description: ID of the task to find
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/taskmanager.TaskResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
      summary: find task
      tags:
      - task
    put:
      consumes:
      - application/json
      description: update task by id
      parameters:
      - description: ID of the task to update
        in: path
        name: id
        required: true
        type: string
      - description: Task object to be updated
        in: body
        name: requestbody
        required: true
        schema:
          $ref: '#/definitions/taskmanager.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/taskmanager.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/taskmanager.TaskError'
      summary: update task
      tags:
      - task
securityDefinitions:
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: Grants read and write access to administrative information
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
